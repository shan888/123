<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com._520it.wms.mapper.EmployeeMapper" >
  <resultMap id="BaseResultMap" type="com._520it.wms.domain.Employee" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="age" property="age" jdbcType="INTEGER" />
    <result column="admin" property="admin" jdbcType="BIT" />
    <association property="dept" javaType="Department">
      <id column="deptId" property="id"/>
      <result column="deptName" property="name"/>
    </association>
    <collection property="roles" ofType="Role"
                select="com._520it.wms.mapper.RoleMapper.selectById" column="id"/>
  </resultMap>
  <sql id="base_selected">
    e.*,
    d.id deptId,
    d.name deptName
  </sql>
  <sql id="base_from">
    employee e LEFT JOIN department d on e.dept_id = d.id
  </sql>
  <sql id="base_where">
    <where>
      <if test="keyword !=null and keyword !=''">
        and (e.name like concat('%',#{keyword},'%') or e.email like concat('%',#{keyword},'%'))
      </if>
      <if test="dept_id >0">
        and d.id = #{dept_id}
      </if>
    </where>
  </sql>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from employee
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteRelation">
    delete from employee_role where employee_id = #{id}
  </delete>
  <delete id="batchDelete">
    delete from employee where id in
    <foreach collection="array" open="(" separator="," close=")" item="id">
      #{id}
    </foreach>
  </delete>
  <insert id="insert" parameterType="com._520it.wms.domain.Employee" useGeneratedKeys="true" keyProperty="id" >
    insert into employee (name, password, email, 
      age, admin, dept_id)
    values (#{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{age,jdbcType=INTEGER}, #{admin,jdbcType=BIT}, #{dept.id,jdbcType=BIGINT})
  </insert>
  <insert id="addRelation">
    insert into employee_role(employee_id ,role_id)VALUES (#{employee_id},#{role_id})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com._520it.wms.domain.Employee" >
    update employee
    set name = #{name,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      age = #{age,jdbcType=INTEGER},
      admin = #{admin,jdbcType=BIT},
      dept_id = #{dept.id,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select <include refid="base_selected"/>
    FROM <include refid="base_from"/>
    where e.id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select <include refid="base_selected"/>
    FROM <include refid="base_from"/>
  </select>
  <select id="query4count" resultType="java.lang.Integer">
    select count(*) from <include refid="base_from"/>
    <include refid="base_where"/>
  </select>
  <select id="query4list" resultMap="BaseResultMap">
    select <include refid="base_selected"/>
    FROM <include refid="base_from"/>
    <include refid="base_where"/>
    limit #{beginIndex} ,#{pageSize}
  </select>
  <select id="checkLogin" resultMap="BaseResultMap">
    SELECT <include refid="base_selected"/>
    FROM <include refid="base_from"/>
    where e.NAME =#{username} and e.password=#{password}
  </select>
</mapper>